%%% -------------------------------------------------------------------
%%% @author  : Joq Erlang
%%% @doc: : 
%%% Created :
%%% Node end point  
%%% Creates and deletes Pods
%%% 
%%% API-kube: Interface 
%%% Pod consits beams from all services, app and app and sup erl.
%%% The setup of envs is
%%% -------------------------------------------------------------------
-module(console_test).      
 
-export([start/2]).
%% --------------------------------------------------------------------
%% Include files
%% --------------------------------------------------------------------

%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
start(ClusterSpec,StartHostSpec)->
    io:format("Start ~p~n",[{?MODULE,?FUNCTION_NAME}]),

    ok=setup(ClusterSpec),
    ok=init_test(ClusterSpec,StartHostSpec),
        
  
    io:format("Stop OK !!! ~p~n",[{?MODULE,?FUNCTION_NAME}]),
  %  init:stop(),
  %  timer:sleep(2000),
    ok.


%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
init_test(ClusterSpec,StartHostSpec)->
    io:format("Start ~p~n",[{?MODULE,?FUNCTION_NAME}]),
    
    %% Ensure that config is started proprely , strange!!
    ok=db_config:create_table(),
    {atomic,ok}=db_config:set(cluster_spec,ClusterSpec),
    ClusterSpec=db_config:get(cluster_spec),
    
    % inititate connect db_etcd info
    {ok,_}=connect_server:create_dbase_info(ClusterSpec),    
    
    % Create first connect node with right cookie
    {ok,Cookie}=db_cluster_spec:read(cookie,ClusterSpec),
    erlang:set_cookie(node(),list_to_atom(Cookie)),
    NodesToConnect=db_cluster_instance:nodes(connect,ClusterSpec),
    [ConnectPodNode]=[ConnectPodNode||ConnectPodNode<-NodesToConnect,
				      {ok,StartHostSpec}==db_cluster_instance:read(host_spec,ClusterSpec,ConnectPodNode)],
    {ok,ConnectNode,_NodeDir,_PingResult}=connect_server:create_connect_node(ClusterSpec,ConnectPodNode,[node()]),

    % Create first controller node 
    
    pod_server:create_pod(
    
    % Create cluster dir + log dir

    % load and start  nodelog + start nodelog common, resource_discovery,
    % hang up


    

    % Kill install node
    

    ok.
%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
-define(LocalTypes,[oam,nodelog,db_etcd]).
-define(TargetTypes,[oam,nodelog,db_etcd]).

setup(ClusterSpec)->
    io:format("Start ~p~n",[{?MODULE,?FUNCTION_NAME}]),

    ok=application:start(common),
    pong=common:ping(),
    ok=application:start(resource_discovery),
    pong=rd:ping(),
    ok=application:start(nodelog),
    pong=nodelog:ping(),
    ok=application:start(db_etcd),
    pong=db_etcd:ping(),
  
    {ok,_}=connect_server:start(),
    pong=connect_server:ping(),
    {ok,_}=pod_server:start(),
    pong=pod_server:ping(),
    {ok,_}=appl_server:start(),
    pong=appl_server:ping(),



    
    [rd:add_local_resource(Type,node())||Type<-?LocalTypes],
    [rd:add_target_resource_type(Type)||Type<-?TargetTypes],
    ok=rd:trade_resources(),
      
    ok.
